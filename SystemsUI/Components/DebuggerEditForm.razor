@inject IDebugEndpoint debugEndpoint

<div class="field">
    <label class="label" for="process">Process</label>
    <BlazoredTypeahead SearchMethod="@SearchProcesses" EnableDropDown="true"
                       TValue="DebugProcessModel"
                       TItem="DebugProcessModel"
                       ValueChanged="SelectedProcessChanged"
                       ValueExpression="@(() => selectedProcess)"
                       name="process">
        <SelectedTemplate Context="process">
            @process.Name - @process.PosProcessName
        </SelectedTemplate>
        <ResultTemplate Context="process">
            @process.Name - @process.PosProcessName 
        </ResultTemplate>
        <NotFoundTemplate>
            Sorry, no results found.
        </NotFoundTemplate>
    </BlazoredTypeahead>
</div>

<div class="field">
    <label class="label">Display Name:</label>
    <div class="control">
        <input class="input" type="text" placeholder="Enter name..." value="@selectedProcess?.Name"/>
    </div>
    <label class="label">FuelPOS Process Name:</label>
    <div class="control">
        <input class="input" type="text" placeholder="PAYT HTEC GEMPAY 1.. etc" value="@selectedProcess?.PosProcessName"/>
    </div>
    <label class="label">Description:</label>
    <div class="control">
        <input class="input" type="text" placeholder="A description of the process, what it does etc" value="@selectedProcess?.Description"/>
    </div>
</div>

@code {
    private List<DebugProcessModel> processModels { get; set; }
    private DebugProcessModel selectedProcess { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        processModels = await debugEndpoint.GetAll();
    }

    private async Task<IEnumerable<DebugProcessModel>> SearchProcesses(string searchText)
    {
        return await Task.FromResult(processModels
            .Where(x =>
            x.Name.ToLower().Contains(searchText.ToLower()) ||
            x.PosProcessName.ToLower().Contains(searchText.ToLower()) ||
            x.Description.ToLower().Contains(searchText.ToLower()))
            .ToList());
    }

    private async Task SelectedProcessChanged(DebugProcessModel result)
    {
        if (result is null)
        {
            selectedProcess = new();
        }

        selectedProcess = result;
    }
}
