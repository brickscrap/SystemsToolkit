using Microsoft.Extensions.Logging;
using System.CommandLine;
using System.CommandLine.Invocation;
using TSGSystemsToolkit.CmdLine.Handlers;
using TSGSystemsToolkit.CmdLine.Options;

namespace TSGSystemsToolkit.CmdLine.Commands
{
    internal class RootCommands : IRootCommands
    {
        private readonly IHandler<ProgaugeOptions> _progaugeHandler;
        private readonly IHandler<TerminalsOptions> _terminalsHandler;
        private readonly IHandler<MutationOptions> _mutationHandler;
        private readonly IHandler<SurveyOptions> _surveyHandler;
        private readonly IHandler<UpdateOptions> _updateHandler;
        private readonly IHandler<VeederRootOptions> _vrHandler;

        public RootCommands(ILogger<RootCommands> logger,
                            IHandler<ProgaugeOptions> progaugeHandler,
                            IHandler<TerminalsOptions> terminalsHandler,
                            IHandler<MutationOptions> mutationHandler,
                            IHandler<SurveyOptions> surveyHandler,
                            IHandler<UpdateOptions> updateHandler,
                            IHandler<VeederRootOptions> vrHandler)
        {
            _progaugeHandler = progaugeHandler;
            _terminalsHandler = terminalsHandler;
            _mutationHandler = mutationHandler;
            _surveyHandler = surveyHandler;
            _updateHandler = updateHandler;
            _vrHandler = vrHandler;
        }

        public RootCommand Create()
        {
            RootCommand cmd = new()
            {
                CreateTanktableCommand(),
                CreatePseCommand(),
                CreateFuelPosCommand(),
                CreateSurveyCommand(),
                new Option<bool>(new[] { "--update" }, "Update your version of Systems Toolkit")
            };


            cmd.Handler = CommandHandler.Create((UpdateOptions options) =>
            {
                return _updateHandler.RunHandlerAndReturnExitCode(options);
            });

            return cmd;
        }

        private Command CreateTanktableCommand() => new("tanktables", "Generate useful files from tank gauge output")
        {
            CreateVeederRootCommand(),
            CreateProgaugeCommand()
        };

        private Command CreateVeederRootCommand()
        {
            Command cmd = new("vdr-root", "Functions for working with output scripts from Veeder Root tank gauges")
            {
                new Argument<string>("filepath", "Path to either an individual tank gauge output, or a directory containing multiple files."),
                new Option<string?>(new[] { "--output", "-o" }, "Path to output directory. If not specified, files will be generated in the same directory as the initial path."),
                new Option<bool>(new[] { "--fuelposfile", "-p" }, "Creates a FuelPOS tank table file (TMS_AOF.INP)"),
                new Option<bool>(new[] { "--csv", "-c" }, "Creates a CSV file containing tank setup information"),
            };

            cmd.Handler = CommandHandler.Create((VeederRootOptions options) =>
            {
                return _vrHandler.RunHandlerAndReturnExitCode(options);
            });

            return cmd;
        }

        private Command CreateProgaugeCommand()
        {
            Command cmd = new("progauge", "Functions for working with output scripts from Pro Gauge tank gauges")
            {
                new Argument<string>("filepath", "Path to a directory containing ."),
                new Option<string?>(new[] { "--output", "-o" }, "Path to output directory. If not specified, files will be generated in the same directory as the initial path."),
                new Option<bool>(new[] { "--fuelposfile", "-p" }, "Creates a FuelPOS tank table file (TMS_AOF.INP)")
            };

            cmd.Handler = CommandHandler.Create((ProgaugeOptions options) =>
            {
                return _progaugeHandler.RunHandlerAndReturnExitCode(options);
            });

            return cmd;
        }

        private Command CreatePseCommand() => new("pse", "Tools for working with the reports generated by Petrol Server")
        {
            CreateTerminalsCommand()
        };

        private Command CreateTerminalsCommand()
        {
            Command cmd = new("terminals", "Commands for use with Terminals_044.csv")
            {
                new Argument<string>("filepath", "Path to Terminals_044.csv"),
                new Option<bool>(new[] { "--emisfile", "-e" }, "Create a Remote eMIS site-list file. If no output path is specified, will deploy the file " +
                "directlty to it's location in your AppData folder."),
                new Option<string>(new[] { "--output", "-o" }, "Output path for any created files.")
            };

            cmd.Handler = CommandHandler.Create((TerminalsOptions options) =>
            {
                return _terminalsHandler.RunHandlerAndReturnExitCode(options);
            });

            return cmd;
        }

        private Command CreateFuelPosCommand() => new("fuelpos", "FuelPOS related commands, such as mutation handling and file transfers")
        {
            CreateMutationCommand()
        };

        private Command CreateMutationCommand()
        {
            Command cmd = new("create-mutation", "Create mutations for FuelPOS")
            {
                new Option<string?>(new[] { "--cardid", "-c" }, "Path to CardIdentifications.db3 - creates a CRDID_MUT based on the database provided."),
                new Option<string?>(new[] { "--output", "-o" }, "Output directory - leave blank to create files in the same directory as the db3.")
            };

            cmd.Handler = CommandHandler.Create((MutationOptions options) =>
            {
                return _mutationHandler.RunHandlerAndReturnExitCode(options);
            });

            return cmd;
        }


        private Command CreateSurveyCommand()
        {
            Command cmd = new("surveyor", "Generates a FuelPOS survey from one or multiple StatDev.xml files.")
            {
                new Argument<string>("filepath", "Path to either an individual file, or directory containing multile StatDev XMLs."),
                new Option<string>(new[] { "--output", "-o" }, "Path to store any created files.") { IsRequired = true },
                new Option<bool>(new[] {"--fuelpos", "-f"}, "Create a FuelPOS survey spreadsheet."),
                new Option<bool>(new[] {"--serialnumbers", "-s"}, "Create a PIN pad serial number survey.")
            };

            cmd.Handler = CommandHandler.Create((SurveyOptions options) =>
            {
                return _surveyHandler.RunHandlerAndReturnExitCode(options);
            });

            return cmd;
        }
    }
}
